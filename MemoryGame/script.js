// FIXED array of control IDs
var imgId= ["x","y","mm","b","m","n","l","ll","a","o","p","nn"];

//images for UI
var imgss_UI = ["img1.jpg","img2.jpg","img3.jpg","img4.jpg","img5.jpg","img.jpg","img1.jpg","img2.jpg","img3.jpg","img4.jpg","img5.jpg","img.jpg"];

// images in memory -- generated by random()
var imgsss_virt = ["img1.jpg","img2.jpg","img3.jpg","img4.jpg","img5.jpg","img.jpg","img1.jpg","img2.jpg","img3.jpg","img4.jpg","img5.jpg","img.jpg"];

// in use wih Hide_All()
var img_hidden = ["imgHidden.jpg","imgHidden.jpg","imgHidden.jpg","imgHidden.jpg","imgHidden.jpg","imgHidden.jpg","imgHidden.jpg","imgHidden.jpg","imgHidden.jpg","imgHidden.jpg","imgHidden.jpg","imgHidden.jpg"];

const handler = () => {
    show(imgId, imgss_UI, imgsss_virt);
    InitStarted();
}

const hide_All = () => {
    showDicapear(imgId,img_hidden);
    InitStarted();
}

const Show_X = () => {
    Id_of_elem = 'x';
    Show_oldImage(imgId,Id_of_elem);
}

const Show_Y = () => {
    Id_of_elem = 'y';
    Show_oldImage(imgId,Id_of_elem);
}

const Show_B = () => {
    Id_of_elem = 'b';
    Show_oldImage(imgId,Id_of_elem);
}

const Show_MM = () => {
    Id_of_elem = 'mm';
    Show_oldImage(imgId,Id_of_elem);
}

const Show_N = () => {
    Id_of_elem = 'n';
    Show_oldImage(imgId,Id_of_elem);
}

const Show_M = () => {
    Id_of_elem = 'm';
    Show_oldImage(imgId,Id_of_elem);
}

const Show_l = () => {
    Id_of_elem = 'l';
    Show_oldImage(imgId,Id_of_elem);
}

const Show_ll = () => {
    Id_of_elem = 'll';
    Show_oldImage(imgId,Id_of_elem);
}

const Show_A = () => {
    Id_of_elem = 'a';
    Show_oldImage(imgId,Id_of_elem);
}

const Show_O = () => {
    Id_of_elem = 'o';
    Show_oldImage(imgId,Id_of_elem);
}

const Show_P = () => {
    Id_of_elem = 'p';
    Show_oldImage(imgId,Id_of_elem);
}

const Show_NN = () => {
    Id_of_elem = 'nn';
    Show_oldImage(imgId,Id_of_elem);
}


function showDicapear(imgId,img_hidden){
    console.log('hide', document.getElementById('x'))

    for (let i=0; i<12; i++){
        //# console.log(document.getElementById('x'));
        let xx = document.getElementById(imgId[i]).src = img_hidden[i];
    }
}

const show_old = () => {
    showOld(imgId,img_hidden);
}

function showOld(imgId,img_hidden){
    console.log('hide', document.getElementById('x'))

    for (let i=0; i<12; i++){
       let xx = document.getElementById(imgId[i]).src = imgsss_virt[i];
    }
}

function Show_oldImage (imgId,Id_of_elem) {    

    for (let i=0; i<12; i++){
        if (imgId[i] === Id_of_elem) {
            

            if (imgsss_virt[i] === imgss_UI[i]) {
                let tt = document.getElementById(imgId[i]).src = img_hidden[i];
                imgss_UI[i] = img_hidden[i]; // Set As Hidden
            }
            else
            {
                if (imgss_UI[i] != imgsss_virt[i]) // imgss_UI[i] is with img_hidden[i]
                {
                    let rr = document.getElementById(imgId[i]).src = imgsss_virt[i];
                    imgss_UI[i] = imgsss_virt[i]; // set by VIRT

                    CheckIfBothImagesAreSame(i);
                }
            }

            
        
        }
    }
 
}

function CheckIfBothImagesAreSame (indexOfArr) {    

    cnt_imges_Hidden = 0;
    for (let k=0; k<12; k++){
        if (imgss_UI[k] === img_hidden[k])
        {
            cnt_imges_Hidden = cnt_imges_Hidden + 1;
        }
    }

    IsContinue = 0;
    if (cnt_imges_Hidden <= 10) {
        IsContinue = 1;
    }
    
    if ( IsContinue == 1) {
        for (let i=0; i<12; i++){
            if (indexOfArr != i)
            {
                if ((imgss_UI[i] === imgss_UI[indexOfArr]) && (imgsss_virt[indexOfArr] === imgss_UI[indexOfArr]))
                {
                    InitGoodResult();       
                }
            }
        }
    }
 
}

function InitGoodResult(){
    document.getElementById('Shuffle').style.color = 'white';
    document.getElementById('Shuffle').style.backgroundColor = 'green';

}

function show(imgId,imgss_UI,imgsss_virt){
    //console.log('in show', document.getElementById('x'))

    shuffle(imgsss_virt);  // RANDOM

    // COPY SAME set of images
    // to UI array from VIRT array
    for (let k=0; k<12; k++){

        imgss_UI[k] = imgsss_virt[k]
    }

    //set images to UI
    for (let i=0; i<12; i++){
      
        let xx = document.getElementById(imgId[i]).src = imgss_UI[i];
        
    }

    InitStarted(); // Init on start; Whan successfully found 2 similar images will be used InitGoodResult()
    
}

function InitStarted(){
    document.getElementById('Shuffle').style.color = 'black';
    document.getElementById('Shuffle').style.backgroundColor = 'teal';
}

function shuffle(array) {
    console.log(array, "shuffle")
    let currentIndex = array.length,  randomIndex;
  
    // While there remain elements to shuffle.
    while (currentIndex != 0) {
  
      // Pick a remaining element.
      randomIndex = Math.floor(Math.random() * currentIndex);
      currentIndex--;
  
      // And swap it with the current element.
      [array[currentIndex], array[randomIndex]] = [
        array[randomIndex], array[currentIndex]];
    }
  
    return array;
  }

//   FILPPED.addEvenetLIstner('click', (e) => {
//     box.style.backgroundcolor = 'black'
//   })

  
  
// Used like so


//show(imgId,imgss_UI)
//console.log(imgId);
//console.log(show)  